const {board} = require('./objects');
const {ship} = require('./objects');
const {player} = require('./objects');

test('After Every missed attack the player turn switches',() => {
    const board1 = new board;
    board1.setBoard();
    board1.receiveAttack([1,1]);
    expect(player1.myTurn).toBe(true);
    board1.receiveAttack([2,1]);
    expect(player1.myTurn).toBe(true);
    board1.receiveAttack([3,1]);
    expect(player1.myTurn).toBe(true);
    board1.receiveAttack([8,8]);
    expect(player1.myTurn).toBe(false);

  });

  test('Computer function will not choose the same square',() => {
    const board1 = new board;
    board1.setBoard();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack();
    player1.compAttack(); 
    console.log(player1.compAttacks.length)
    console.log(player1.compAttacks);
    expect(player1.compAttack).not.toEqual();
    //honestly not sure how to write the test for this one but
    //I checked that there are no duplicates in the 100
    //elements, also adding one more item will break the
    //code as there is nothing left
  });

  